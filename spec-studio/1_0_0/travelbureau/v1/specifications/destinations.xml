<?xml version="1.0" encoding="UTF-8"?>
<resource name="destinations" product="travelbureau" pre-loaded="false" specification="1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../xsd/spec.xsd">
    <components>
        <structure name="Destination" ref-name="Destination">
            <property name="id" type="long_string" include-for="Request[update], Response[read]" required-for="all">
                <description>The unique record ID of the destination.</description>
            </property>
            <property name="name" type="string" required-for="all" unique-for="all">
                <description>Name of the destination.</description>
            </property>
            <property name="travelogue" type="string" content-types="text/html">
                <description>Provides the comprehensive details about the destination and places nearby to explore. The value for this key should be given in the HTML format.</description>
            </property>
            <property name="rating" type="integer" range="1,10">
                <description>Denotes the rating of a particular destination based on the general public reviews.</description>
            </property>
        </structure>

        <request-body name="DestinationBody">
            <content>
                <encode type="application/json" />
                <structure-ref name="Destination" />
            </content>
        </request-body>

        <argument name="ids" location="param" length="200" delimiter="," style="delimiter">
            <description>Specify the ids for which the operation has to take place.</description>
            <content>
                <encode type="text/plain"/>
                <structure>
                    <property path="destinations:$.id" type="collections"/>
                </structure>
            </content>
        </argument>
    </components>

    <info title="Destinations" version="1">
        <description>This resource serves as a gateway to the world's most enchanting and diverse locales. It provides details such as famous nearby places to visit, accompanied by pictures and a comprehensive travelogue for each destination. The API facilitates efficient retrieval, management, and utilization of destination data.</description>

        <terms-of-service-ref name="commons.Terms and Conditions"/>
        <contact-details-ref name="commons.Travel Bureau Support"/>
        <license-details-ref name="commons.Apache License 2"/>
    </info>

    <resource-config primary-structure="Destination">
        <path-config data-extraction-path="$">
            <primary path="$.id"/>
        </path-config>
    </resource-config>

    <server-ref name="commons.TravelBureauAPIServer"/>

    <url path="/api/v1/destinations">
        <operation category="read" method="get" name="Get Destinations">
            <description>This operation fetches the destination details available in the Travel Bureau. You can also provide the IDs of the records to get the details of particular records.</description>

            <argument-ref name="ids"/>

            <response status="200">
                <content>
                    <encode type="application/json" />
                    <path-config data-extraction-path="$.destinations" />
                    <structure name="DestinationsWrapper">
                        <property name="destinations" type="collections" required-for="response">
                            <structure-ref name="Destination" />
                        </property>
                    </structure>
                </content>
            </response>
            <response-ref name="commons.InvalidParamResponse" />

            <authentication location="header" name="Authorization" schema="commons.OAuth2Schema" scopes="TravelBureau.destinations.READ" type="oauth2"/>
        </operation>

        <operation category="create" method="post" name="Create Destination">
            <description>It helps you to add new destination to the Travel Bureau.</description>

            <request-body-ref name="DestinationBody"/>

            <response-ref name="commons.CreateSuccess"/>
            <response-ref name="commons.BadRequest"/>

            <authentication location="header" name="Authorization" schema="commons.OAuth2Schema" scopes="TravelBureau.destinations.CREATE" type="oauth2"/>
        </operation>

        <operation category="update" method="put" name="Update Destinations">
            <description>It aids you in updating the details of the existing destination in the Travel Bureau.</description>

            <request-body-ref name="DestinationBody"/>

            <response-ref name="commons.UpdateSuccess"/>
            <response-ref name="commons.BadRequest"/>

            <authentication location="header" name="Authorization" schema="commons.OAuth2Schema" scopes="TravelBureau.destinations.UPDATE" type="oauth2"/>
        </operation>

        <operation category="delete" method="delete" name="Delete Destinations">
            <description>This helps you to delete the existing destination records in the Travel Bureau.</description>

            <argument-ref name="ids"/>

            <response status="200">
                <content>
                    <encode type="application/json" />
                    <path-config data-extraction-path="$.destinations" />
                    <structure name="DestinationsWrapper">
                        <property name="destinations" type="collections" required-for="response">
                            <structure-ref name="commons.DeleteActionResponse" />
                        </property>
                    </structure>
                </content>
            </response>
            <response-ref name="commons.InvalidParamResponse" />

            <authentication location="header" name="Authorization" schema="commons.OAuth2Schema" scopes="TravelBureau.destinations.DELETE" type="oauth2"/>
        </operation>
    </url>

    <authentication location="header" name="Authorization" schema="commons.OAuth2Schema" scopes="TravelBureau.destinations.ALL" type="oauth2"/>
</resource>
